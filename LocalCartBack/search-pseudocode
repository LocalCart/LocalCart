def search(query):
    dist_thresholds = { ... } #array where each element defines the upper bound of a distance category
                              #e.g. [20, 30, 40, 60] means the distance categories are [0, 20), [20, 30), [30, 40),
                              #[40, 60)
    heuristics = new double[dc] #each element of the array is a list containing the entries that are in the
                                #corresponding distance category
    keywords = query.split(" ")
    for (entry : database):
        title = entry.title
        desc = entry.desc #description
        int dc = dist_category(entry.dist, dist_thresholds)
        title_matches = 0
        desc_matches = 0

        for (keyword : keywords):
            if (title.contains(keyword))
                title_matches++;
            if (desc.contains(keyword))
                desc_matches++;
        if (dc != -1)
            heuristics[dc].add(3 * title_matches + desc_matches)

    for (List l : heuristics)
        sort(l) #largest to smallest
    for (i = 0; i < heuristics.length; i++)
        display("Items from stores within " + dist_thresholds[i] + " miles:")
        for (j = 0; heuristics[i].get(j) >= relevance_threshold; j++)
            display(heuristics[i].get(j))


def dist_category(dist, dist_thresholds):
    if (dist >= dist_thresholds[-1]): #if distance is too far to fit in any of the categories
        i = -1
    else:
        i = dist_thresholds[-2]
        while (i > 0)
            if (dist >= dist_thresholds[i])
                break;
            i--;
    return i;
